// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `demo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package demo;

public class TwoPoints implements java.lang.Cloneable, java.io.Serializable
{
    public Point coord1;

    public Point coord2;

    public TwoPoints()
    {
        coord1 = new Point();
        coord2 = new Point();
    }

    public TwoPoints(Point coord1, Point coord2)
    {
        this.coord1 = coord1;
        this.coord2 = coord2;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TwoPoints _r = null;
        if(rhs instanceof TwoPoints)
        {
            _r = (TwoPoints)rhs;
        }

        if(_r != null)
        {
            if(coord1 != _r.coord1)
            {
                if(coord1 == null || _r.coord1 == null || !coord1.equals(_r.coord1))
                {
                    return false;
                }
            }
            if(coord2 != _r.coord2)
            {
                if(coord2 == null || _r.coord2 == null || !coord2.equals(_r.coord2))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::demo::TwoPoints");
        __h = IceInternal.HashUtil.hashAdd(__h, coord1);
        __h = IceInternal.HashUtil.hashAdd(__h, coord2);
        return __h;
    }

    public TwoPoints
    clone()
    {
        TwoPoints c = null;
        try
        {
            c = (TwoPoints)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        Point.__write(__os, coord1);
        Point.__write(__os, coord2);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        coord1 = Point.__read(__is, coord1);
        coord2 = Point.__read(__is, coord2);
    }

    static public void
    __write(IceInternal.BasicStream __os, TwoPoints __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TwoPoints
    __read(IceInternal.BasicStream __is, TwoPoints __v)
    {
        if(__v == null)
        {
             __v = new TwoPoints();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TwoPoints __nullMarshalValue = new TwoPoints();

    public static final long serialVersionUID = 8996685604366897976L;
}
